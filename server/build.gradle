plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
	id 'war'
}

apply plugin: 'io.spring.dependency-management'

group = 'pl.masi.orange'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	driver
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	driver 'postgresql:postgresql:9.0-801.jdbc4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	compile"org.springframework.boot:spring-boot-starter-security"
	compile"io.jsonwebtoken:jjwt:0.7.0"
	compile('com.google.code.gson:gson:2.8.2')
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly("org.projectlombok:lombok:1.16.18")
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

import groovy.sql.Sql
defaultTasks 'connectToDb'
repositories {
	flatDir name: 'localRepository', dirs: 'lib'
}

def loader = GroovyObject.class.classLoader
configurations.driver.each {File file -> loader.addURL(file.toURI().toURL())}


//Po odpaleniu serwera użyć komendy "gradlew insertToDb" w konsoli (będąc w folderze server)
task insertToDb {
	description = "Insert data to database"
	doLast {
		def props = [user: 'postgres', password: 'postgres', allowMultiQueries: 'true'] as Properties
		def url = 'jdbc:postgresql://localhost:5432/orange'
		def driver = 'org.postgresql.Driver'
		Sql sql = Sql.newInstance(url,props,driver)
		sql.execute '''insert into permission (id, permission_name) values (nextval('permission_id_seq'), 'MODERATOR'), (nextval('permission_id_seq'), 'EDITOR'), (nextval('permission_id_seq'), 'CANDIDATE') on conflict do nothing'''
		sql.execute '''insert into position (id, name, active) values (nextval('position_id_seq'), 'Junior Machine Learning Engineer', true), (nextval('position_id_seq'), 'Senior Recruiter', true), (nextval('position_id_seq'), 'Network Engineer', true) on conflict do nothing'''
		//Password for each account - Test1234
		sql.execute '''insert into account (id, username, password, first_name, last_name, permission_id) values (nextval('account_id_seq'), 'candidate','$2y$12$04RrXIY9/jjioirMcSCztOs9ukPMBiYbsucvk7dkpufBOsIFROb9G','firstName','lastName',3), (nextval('account_id_seq'), 'moderator','$2y$12$04RrXIY9/jjioirMcSCztOs9ukPMBiYbsucvk7dkpufBOsIFROb9G','firstName','lastName',1), (nextval('account_id_seq'), 'editor','$2y$12$04RrXIY9/jjioirMcSCztOs9ukPMBiYbsucvk7dkpufBOsIFROb9G','firstName','lastName',2) on conflict do nothing'''
		sql.execute '''insert into question (id, content) values (nextval('question_id_seq'), 'Explain the recurrence hidden behind recurrent neural network cells.'), (nextval('question_id_seq'), 'What will be the output of printing typeof(typeof(int)) in JavaScript?'), (nextval('question_id_seq'), 'Explain the memory overhead of polymorphism in C++.') on conflict do nothing'''
		sql.execute '''insert into test (id, name, position_id) values (nextval('test_id_seq'), 'Junior Engineer test', 1), (nextval('test_id_seq'), 'Network Engineer test', 3) on conflict do nothing'''
		sql.execute '''insert into test_question (test_id, question_id) values (1,1), (1,2), (1,3), (2,2), (2,3) on conflict do nothing'''
		sql.close()
	}
}